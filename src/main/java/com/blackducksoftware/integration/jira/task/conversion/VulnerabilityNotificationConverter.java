/**
 * Hub JIRA Plugin
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.jira.task.conversion;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.blackducksoftware.integration.exception.IntegrationException;
import com.blackducksoftware.integration.hub.api.generated.view.VersionBomComponentView;
import com.blackducksoftware.integration.hub.api.generated.view.VulnerableComponentView;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.request.Request;
import com.blackducksoftware.integration.hub.service.HubService;
import com.blackducksoftware.integration.hub.service.model.RequestFactory;
import com.blackducksoftware.integration.hub.throwaway.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.throwaway.NotificationContentItem;
import com.blackducksoftware.integration.hub.throwaway.NotificationEvent;
import com.blackducksoftware.integration.hub.throwaway.ProjectVersionModel;
import com.blackducksoftware.integration.hub.throwaway.SubProcessorCache;
import com.blackducksoftware.integration.hub.throwaway.VulnerabilityContentItem;
import com.blackducksoftware.integration.jira.common.HubJiraConstants;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;
import com.blackducksoftware.integration.jira.common.HubProjectMappings;
import com.blackducksoftware.integration.jira.common.HubUrlParser;
import com.blackducksoftware.integration.jira.common.JiraContext;
import com.blackducksoftware.integration.jira.common.JiraProject;
import com.blackducksoftware.integration.jira.common.exception.ConfigurationException;
import com.blackducksoftware.integration.jira.common.exception.EventDataBuilderException;
import com.blackducksoftware.integration.jira.config.HubJiraFieldCopyConfigSerializable;
import com.blackducksoftware.integration.jira.task.JiraSettingsService;
import com.blackducksoftware.integration.jira.task.conversion.output.HubEventAction;
import com.blackducksoftware.integration.jira.task.conversion.output.IssuePropertiesGenerator;
import com.blackducksoftware.integration.jira.task.conversion.output.VulnerabilityIssuePropertiesGenerator;
import com.blackducksoftware.integration.jira.task.conversion.output.eventdata.EventCategory;
import com.blackducksoftware.integration.jira.task.conversion.output.eventdata.EventData;
import com.blackducksoftware.integration.jira.task.conversion.output.eventdata.EventDataBuilder;
import com.blackducksoftware.integration.jira.task.issue.JiraServices;

public class VulnerabilityNotificationConverter extends NotificationToEventConverter {
    private static final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(VulnerabilityNotificationConverter.class.getName()));

    private final HubService hubService;

    public VulnerabilityNotificationConverter(final SubProcessorCache cache, final HubProjectMappings mappings, final HubJiraFieldCopyConfigSerializable fieldCopyConfig, final JiraServices jiraServices,
            final JiraContext jiraContext, final JiraSettingsService jiraSettingsService, final HubService hubService)
            throws ConfigurationException {
        super(cache, jiraServices, jiraContext, jiraSettingsService, mappings, HubJiraConstants.HUB_VULNERABILITY_ISSUE, fieldCopyConfig, hubService, logger);
        this.hubService = hubService;
    }

    @Override
    public void process(final NotificationContentItem notification) throws HubIntegrationException {
        final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;
        logger.debug("vulnerabilityNotif: " + vulnerabilityContentItem);
        final ProjectVersionModel projectVersion = notification.getProjectVersion();
        logger.debug("Getting JIRA project(s) mapped to Hub project: " + projectVersion.getProjectName());
        final List<JiraProject> mappingJiraProjects = getMappings()
                .getJiraProjects(projectVersion.getProjectName());
        logger.debug("There are " + mappingJiraProjects.size() + " JIRA projects mapped to this Hub project : "
                + projectVersion.getProjectName());
        if (!mappingJiraProjects.isEmpty()) {

            boolean componentVersionExistsInBom = true;
            componentVersionExistsInBom = isComponentVersionHasVulnerabilities(vulnerabilityContentItem);

            for (final JiraProject jiraProject : mappingJiraProjects) {
                logger.debug("JIRA Project: " + jiraProject);
                try {
                    final NotificationEvent projectEvent = handleNotificationPerJiraProject(vulnerabilityContentItem,
                            jiraProject, componentVersionExistsInBom);
                    if (projectEvent != null) {
                        getCache().addEvent(projectEvent);
                    }
                } catch (final Exception e) {
                    logger.error(e);
                    getJiraSettingsService().addHubError(e, projectVersion.getProjectName(),
                            projectVersion.getProjectVersionName(), jiraProject.getProjectName(),
                            getJiraContext().getJiraAdminUser().getName(),
                            getJiraContext().getJiraIssueCreatorUser().getName(), "transitionIssue");
                    continue;
                }
            }
        }
    }

    @Override
    protected VersionBomComponentView getBomComponent(final NotificationContentItem notification) throws HubIntegrationException {
        final VersionBomComponentView bomComp = getBomComponent(notification.getProjectVersion(),
                notification.getComponentName(), null, notification.getComponentVersion());
        return bomComp;
    }

    private boolean isComponentVersionHasVulnerabilities(final VulnerabilityContentItem vulnerabilityContentItem) {
        if (CollectionUtils.isEmpty(vulnerabilityContentItem.getDeletedVulnList())) {
            logger.debug("Since no vulnerabilities were deleted, the component must still have vulnerabilities");
            return true;
        }

        final String vulnerableComponentsUrl = vulnerabilityContentItem.getProjectVersion().getVulnerableComponentsLink();
        if (vulnerableComponentsUrl == null) {
            logger.debug(
                    "The vulnerable-components link is missing from the project version object. Unable to determine if this component still has vulnerabilities");
            return true;
        }

        List<VulnerableComponentView> vulnerableBomComponentItems;
        try {
            final Request.Builder requestBuilder = RequestFactory.createCommonGetRequestBuilder(vulnerableComponentsUrl);
            requestBuilder.addQueryParameter("q", vulnerabilityContentItem.getComponentName());
            vulnerableBomComponentItems = hubService.getResponses(VulnerableComponentView.class, requestBuilder, true);
        } catch (final IntegrationException e) {
            final String msg = String.format("Error getting vulnerable components. Unable to determine if this component still has vulnerabilities. The error was: %s",
                    e.getMessage());
            logger.error(msg);
            getJiraSettingsService().addHubError(msg, "getVulnerableComponentsMatchingComponentName");
            return true;
        }

        logger.debug("vulnerableBomComponentItems.size(): " + vulnerableBomComponentItems.size());
        if (hasVersion(vulnerableBomComponentItems, vulnerabilityContentItem.getComponentVersion().versionName)) {
            logger.debug("This component still has vulnerabilities");
            return true;
        } else {
            logger.debug("This component either no longer has vulnerabilities, or is no longer in the BOM");
            return false;
        }
    }

    private boolean hasVersion(final List<VulnerableComponentView> vulnerableBomComponentItems,
            final String targetVersionName) {
        for (final VulnerableComponentView vulnerableBomComponentItem : vulnerableBomComponentItems) {
            final String currentVersionName = vulnerableBomComponentItem.componentVersionName;
            if (!StringUtils.isEmpty(currentVersionName) && currentVersionName.equals(targetVersionName)) {
                return true;
            }
        }
        return false;
    }

    private NotificationEvent handleNotificationPerJiraProject(final VulnerabilityContentItem notification,
            final JiraProject jiraProject, final boolean componentVersionExistsInBom)
            throws EventDataBuilderException, IntegrationException {

        final List<VulnerabilitySourceQualifiedId> addedVulnList = notification.getAddedVulnList();
        final List<VulnerabilitySourceQualifiedId> updatedVulnList = notification
                .getUpdatedVulnList();
        final List<VulnerabilitySourceQualifiedId> deletedVulnList = notification
                .getDeletedVulnList();

        final boolean notificationHasOnlyDeletes = (addedVulnList == null || addedVulnList.isEmpty())
                && (updatedVulnList == null || updatedVulnList.isEmpty())
                && (deletedVulnList != null && !deletedVulnList.isEmpty());

        HubEventAction eventAction = HubEventAction.ADD_COMMENT;
        if (!componentVersionExistsInBom) {
            eventAction = HubEventAction.RESOLVE;
        } else if (notificationHasOnlyDeletes) {
            eventAction = HubEventAction.ADD_COMMENT_IF_EXISTS;
        }

        final String vulnerableComponentsUrl = notification.getProjectVersion().getVulnerableComponentsLink();
        final IssuePropertiesGenerator issuePropertiesGenerator = new VulnerabilityIssuePropertiesGenerator(notification);
        final String comment = generateComment(notification);

        final String licensesString = getComponentLicensesStringPlainText(notification);
        logger.debug("Component " + notification.getComponentName() +
                " (version: " + notification.getComponentVersion().versionName + "): License: " + licensesString);

        final VersionBomComponentView bomComp = getBomComponent(notification);
        final EventDataBuilder eventDataBuilder = new EventDataBuilder(EventCategory.VULNERABILITY);
        eventDataBuilder.setAction(eventAction);
        eventDataBuilder.setPropertiesFromJiraContext(getJiraContext());
        eventDataBuilder.setPropertiesFromJiraProject(jiraProject);

        eventDataBuilder.setJiraIssueTypeId(getIssueTypeId());
        eventDataBuilder.setJiraFieldCopyMappings(getFieldCopyConfig().getProjectFieldCopyMappings());
        eventDataBuilder.setJiraIssueComment(comment);
        eventDataBuilder.setJiraIssueCommentForExistingIssue(comment);
        eventDataBuilder.setJiraIssueReOpenComment(HubJiraConstants.HUB_VULNERABILITY_REOPEN);
        eventDataBuilder.setJiraIssueResolveComment(HubJiraConstants.HUB_VULNERABILITY_RESOLVE);
        eventDataBuilder.setJiraIssueCommentInLieuOfStateChange(comment);
        eventDataBuilder.setJiraIssuePropertiesGenerator(issuePropertiesGenerator);
        eventDataBuilder.setHubLicenseNames(licensesString);

        eventDataBuilder.setHubProjectName(notification.getProjectVersion().getProjectName());
        eventDataBuilder.setHubProjectVersion(notification.getProjectVersion().getProjectVersionName());
        eventDataBuilder.setHubProjectVersionUrl(notification.getProjectVersion().getUrl());
        eventDataBuilder.setHubComponentName(notification.getComponentName());
        eventDataBuilder.setHubComponentVersion(notification.getComponentVersion().versionName);
        eventDataBuilder.setHubComponentVersionUrl(notification.getComponentVersionUrl());
        eventDataBuilder.setHubComponentUsage(getComponentUsage(notification, bomComp));
        eventDataBuilder.setHubProjectVersionNickname(getProjectVersionNickname(notification));
        eventDataBuilder.setJiraIssueSummary(getIssueSummary(notification));
        eventDataBuilder.setJiraIssueDescription(getIssueDescription(notification, vulnerableComponentsUrl));
        eventDataBuilder.setComponentIssueUrl(notification.getComponentIssueLink());

        populateEventDataBuilder(eventDataBuilder, notification);

        final EventData eventData = eventDataBuilder.build();

        final String key = generateEventKey(eventData.getDataSet());
        final Map<String, Object> eventDataSet = new HashMap<>(1);
        eventDataSet.put(HubJiraConstants.EVENT_DATA_SET_KEY_JIRA_EVENT_DATA, eventData);
        final NotificationEvent event = new NotificationEvent(key, NotificationCategoryEnum.VULNERABILITY, eventDataSet);

        return event;
    }

    private String generateComment(final VulnerabilityContentItem vulnerabilityContentItem) {
        final StringBuilder commentText = new StringBuilder();
        commentText.append("(Black Duck Hub JIRA plugin auto-generated comment)\n");
        generateVulnerabilitiesCommentText(commentText, vulnerabilityContentItem.getAddedVulnList(), "added");
        generateVulnerabilitiesCommentText(commentText, vulnerabilityContentItem.getUpdatedVulnList(), "updated");
        generateVulnerabilitiesCommentText(commentText, vulnerabilityContentItem.getDeletedVulnList(), "deleted");
        return commentText.toString();
    }

    private void generateVulnerabilitiesCommentText(final StringBuilder commentText, final List<VulnerabilitySourceQualifiedId> vulns, final String verb) {
        commentText.append("Vulnerabilities " + verb + ": ");
        int index = 0;
        if (vulns != null && !vulns.isEmpty()) {
            for (final VulnerabilitySourceQualifiedId vuln : vulns) {
                commentText.append(vuln.vulnerabilityId + " (" + vuln.source + ")");
                if ((index + 1) < vulns.size()) {
                    commentText.append(", ");
                }
                index++;
            }
        } else {
            commentText.append("None");
        }
        commentText.append("\n");
    }

    private String getIssueSummary(final VulnerabilityContentItem notif) {
        final StringBuilder issueSummary = new StringBuilder();
        issueSummary.append("Black Duck vulnerability status changes on Hub project '");
        issueSummary.append(notif.getProjectVersion().getProjectName());
        issueSummary.append("' / '");
        issueSummary.append(notif.getProjectVersion().getProjectVersionName());
        issueSummary.append("', component '");
        issueSummary.append(notif.getComponentName());
        issueSummary.append("' / '");
        issueSummary.append(notif.getComponentVersion().versionName);
        issueSummary.append("'");
        return issueSummary.toString();
    }

    private String getIssueDescription(final VulnerabilityContentItem notif, final String vulnerableComponentsUrl) {
        final StringBuilder issueDescription = new StringBuilder();

        issueDescription.append("This issue tracks vulnerability status changes on Hub project ");
        final String componentsLink = notif.getProjectVersion().getComponentsLink();
        if (componentsLink == null) {
            issueDescription.append("'");
            issueDescription.append(notif.getProjectVersion().getProjectName());
            issueDescription.append("' / '");
            issueDescription.append(notif.getProjectVersion().getProjectVersionName());
            issueDescription.append("'");
        } else {
            issueDescription.append("['");
            issueDescription.append(notif.getProjectVersion().getProjectName());
            issueDescription.append("' / '");
            issueDescription.append(notif.getProjectVersion().getProjectVersionName());
            issueDescription.append("'|");
            issueDescription.append(componentsLink);
            issueDescription.append("]");
        }
        issueDescription.append(", component '");

        issueDescription.append(notif.getComponentName());
        issueDescription.append("' / '");
        issueDescription.append(notif.getComponentVersion().versionName);
        issueDescription.append("'. For details, see the comments below, or the project's ");
        if (vulnerableComponentsUrl == null) {
            issueDescription.append("vulnerabilities");
        } else {
            issueDescription.append("[vulnerabilities|");
            issueDescription.append(vulnerableComponentsUrl);
            issueDescription.append("]");
        }
        issueDescription.append(" in the Hub.");
        final String licenseText;
        try {
            licenseText = getComponentLicensesStringWithLinksAtlassianFormat(notif);
            issueDescription.append("\nComponent license(s): ");
            issueDescription.append(licenseText);
        } catch (final IntegrationException e) {
            // omit license text
        }
        return issueDescription.toString();
    }

    @Override
    public String generateEventKey(final Map<String, Object> inputData)
            throws HubIntegrationException {
        final EventData eventData = (EventData) inputData.get(HubJiraConstants.EVENT_DATA_SET_KEY_JIRA_EVENT_DATA);

        final Long jiraProjectId = eventData.getJiraProjectId();
        final String hubProjectVersionUrl = eventData.getHubProjectVersionUrl();
        final String hubComponentVersionUrl = eventData.getHubComponentVersionUrl();
        final StringBuilder keyBuilder = new StringBuilder();
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_ISSUE_TYPE_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_ISSUE_TYPE_VALUE_VULNERABILITY);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_JIRA_PROJECT_ID_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(jiraProjectId.toString());
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_PROJECT_VERSION_REL_URL_HASHED_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(hashString(HubUrlParser.getRelativeUrl(hubProjectVersionUrl)));
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_COMPONENT_REL_URL_HASHED_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(""); // There is never a component URL
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_COMPONENT_VERSION_REL_URL_HASHED_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(hashString(HubUrlParser.getRelativeUrl(hubComponentVersionUrl)));

        final String key = keyBuilder.toString();

        logger.debug("property key: " + key);
        return key;
    }
}
